trigger:
- master
- rel/*

pr:
- master
- rel/*

variables:
  majorVer: '2'
  minorVer: '0'
  revisionVer: '0'
  dottedVersion: '$(majorVer).$(minorVer).$(revisionVer).0'
  buildPlatform: 'x86'
  buildConfiguration: 'Release'
  msixProjectPath: "./src/WvdMigration/MsixPackage"
  packageManifestName: "$(msixProjectPath)/Package.appxmanifest"
  publishedPackageName: "WvdMigration.$(dottedVersion).msix"
  publishedVhdName: "WvdMigration.$(dottedVersion).vhd"
  intermediatePackagePath: ".\\msixmgr\\x64\\$(publishedPackageName)"
  pfxName: "MsixPackage_TemporaryKey.pfx"
  vhdSize: "6"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
- job: Build
  pool:
    vmImage: windows-2019  
 
  steps:

  - powershell: |
     # Update AppxManifest. This must be done before the build.
     [xml]$manifest = get-content "$(packageManifestName)"
     $manifest.Package.Identity.Version = "$(dottedVersion)"
     $manifest.save("$(packageManifestName)")

    displayName: 'Update manifest version'

  - task: MSBuild@1
    inputs:
     solution: '**/*.sln'
     platform: $(buildPlatform)
     configuration: $(buildConfiguration)
     msbuildArguments: '/restore /p:UapAppxPackageBuildMode=$(MsixBuildMode) /p:AppxPackageOutput=$(Build.artifactStagingDirectory)/$(publishedPackageName)'
     maximumCpuCount: false
    displayName: 'Build solution'

  - task: DownloadSecureFile@1
    inputs:
     secureFile: "$(pfxName)"
    displayName: 'Download PFX from secure storage'

  - script: '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool" sign /fd SHA256 /f $(Agent.TempDirectory)/$(pfxName) $(Build.artifactStagingDirectory)/$(publishedPackageName)'
    condition: succeeded()
    displayName: 'Sign MSIX Package'

  - script: copy $(Build.artifactStagingDirectory)\$(publishedPackageName) $(intermediatePackagePath)
    condition: succeeded()
    displayName: 'Setup MsixMgr files'

  - task: CmdLine@2
    inputs:
     script: |
      echo.> c:\temp\command.txt create vdisk file=c:\temp\$(publishedVhdName) maximum=$(vhdSize)
      diskpart /s c:\temp\command.txt
    displayName: 'Create VHD'

     # Mount VHD, Create root directory & Expand MSIX into VHD
  - powershell: |
      $vhdObject = Mount-DiskImage c:\temp\$(publishedVhdName) -Passthru
      $disk = Initialize-Disk -Passthru -Number $vhdObject.Number -PartitionStyle MBR
      $partition = New-Partition -AssignDriveLetter -UseMaximumSize -DiskNumber $disk.Number
      Format-Volume -FileSystem NTFS -Confirm:$false -DriveLetter $partition.DriveLetter -Force
      $vhdRoot = $partition.DriveLetter + ':\VHDRoot'
      New-Item -Path $vhdRoot -ItemType Directory
      .\msixmgr\x64\msixmgr.exe -Unpack -packagePath $(intermediatePackagePath) -destination $vhdRoot -applyacls
      Dismount-DiskImage c:\temp\$(publishedVhdName)

    displayName: Expanded MSIX into VHD

  - script: copy c:\temp\$(publishedVhdName) $(build.artifactStagingDirectory)
    condition: succeeded()
    displayName: 'Copy VHD to Output dir'

  - task: CopyFiles@2
    inputs:
     SourceFolder: '$(system.defaultWorkingDirectory)'
     Contents: '**\bin\$(buildConfiguration)\**'
     TargetFolder: '$(build.artifactStagingDirectory)'
    displayName: 'Copy Files to: $(build.artifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(build.artifactStagingDirectory)'
    displayName: 'Publish Artifact: drop'
